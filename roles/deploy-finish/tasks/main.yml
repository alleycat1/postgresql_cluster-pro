---

- name: Make sure handlers are flushed immediately
  ansible.builtin.meta: flush_handlers

- block:
    - name: Check postgresql cluster health
      run_once: true
      become: true
      become_user: postgres
      ansible.builtin.command: patronictl -c /etc/patroni/patroni.yml list
      register: patronictl_result
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/bin:/usr/local/bin"
      changed_when: false

    - name: PostgreSQL Cluster health
      run_once: true
      ansible.builtin.debug:
        var: patronictl_result.stdout_lines
  ignore_errors: true
  tags: patroni_status, cluster_info, cluster_status, point_in_time_recovery

- block:
    - name: Get postgresql database list
      run_once: true
      become: true
      become_user: postgres
      ansible.builtin.command:
        "{{ postgresql_bin_dir }}/psql -p {{ postgresql_port }} -U {{ patroni_superuser_username }} -d postgres -c
        \"
          SELECT
          d.datname as name,
          pg_get_userbyid(d.datdba) as owner,
          pg_encoding_to_char(d.encoding) as encoding,
          d.datcollate as collate,
          d.datctype as ctype,
          CASE
          WHEN has_database_privilege(d.datname, 'CONNECT')
          THEN pg_size_pretty(pg_database_size(d.datname))
          ELSE 'No Access'
          END
          size,
          t.spcname as tablespace
          FROM pg_catalog.pg_database d
          JOIN pg_catalog.pg_tablespace t
          ON d.dattablespace = t.oid
          WHERE NOT datistemplate
          ORDER BY 1
        \""
      register: dbs_result
      delegate_to: "{{ groups.master[0] }}"
      changed_when: false

    - name: PostgreSQL list of databases
      run_once: true
      ansible.builtin.debug:
        var: dbs_result.stdout_lines
  ignore_errors: true
  tags: databases, db_list, cluster_info, cluster_status, point_in_time_recovery

- block:  # if cluster_vip is defined
    - name: PostgreSQL Cluster connection info
      run_once: true
      ansible.builtin.debug:
        msg:
          - +------------------------------------------------+
          - address (VIP) {{ cluster_vip }}
          - port {{ haproxy_listen_port.master }} (read/write) master
          - port {{ haproxy_listen_port.replicas }} (read only)  all replicas
          - port {{ haproxy_listen_port.replicas_sync }} (read only)  synchronous replica only
          - port {{ haproxy_listen_port.replicas_async }} (read only)  asynchronous replicas only
          - +------------------------------------------------+
      when:
        - with_haproxy_load_balancing | bool
        - synchronous_mode | bool

    - name: PostgreSQL Cluster connection info
      run_once: true
      ansible.builtin.debug:
        msg:
          - +------------------------------------------------+
          - address (VIP) {{ cluster_vip }}
          - port {{ haproxy_listen_port.master }} (read/write) master
          - port {{ haproxy_listen_port.replicas }} (read only)  all replicas
          - +------------------------------------------------+
      when:
        - with_haproxy_load_balancing | bool
        - not synchronous_mode | bool

    - name: PostgreSQL Cluster connection info
      run_once: true
      ansible.builtin.debug:
        msg:
          - +------------------------------------------------+
          - address (VIP) {{ cluster_vip }}
          - port {% if pgbouncer_install %}{{ pgbouncer_listen_port }} (pgbouncer){% else %}{{ postgresql_port }}{% endif %}
          - +------------------------------------------------+
      when:
        - not with_haproxy_load_balancing | bool
  when:
    - (cluster_vip is defined and cluster_vip | length > 0)
    - dcs_type == "etcd"
  ignore_errors: true
  tags: conn_info, cluster_info, cluster_status

- block:
    - name: Get vip info
      ansible.builtin.set_fact:
        man_ip: "{{ item }}"
      loop: "{{ ansible_all_ipv4_addresses }}"
      when: item == cluster_vip

    - name: Virtual IP Address (VIP) info
      ansible.builtin.debug:
        msg:
          "Cluster ip address (VIP) {{ cluster_vip }}
           is running on server {{ ansible_hostname }}"
      when: man_ip is defined and man_ip == cluster_vip
  when:
    - (cluster_vip is defined and cluster_vip | length > 0)
    - dcs_type == "etcd"
  ignore_errors: true
  tags: vip_owner, vip_status, cluster_info, cluster_status


- block:  # if cluster_vip is not defined
    - name: Create list of nodes
      run_once: true
      ansible.builtin.set_fact:
        haproxy_nodes: >-
          {{
            groups['balancers']
            | default([])
            | map('extract', hostvars, 'inventory_hostname')
            | join(',')
          }}
        postgres_cluster_nodes: >-
          {{
            groups['postgres_cluster']
            | default([])
            | map('extract', hostvars, 'inventory_hostname')
            | join(',')
          }}

    - name: PostgreSQL Cluster connection info
      run_once: true
      ansible.builtin.debug:
        msg:
          - +------------------------------------------------+
          - address {{ haproxy_nodes }}
          - port {{ haproxy_listen_port.master }} (read/write) master
          - port {{ haproxy_listen_port.replicas }} (read only)  all replicas
          - port {{ haproxy_listen_port.replicas_sync }} (read only)  synchronous replica only
          - port {{ haproxy_listen_port.replicas_async }} (read only)  asynchronous replicas only
          - +------------------------------------------------+
      when:
        - with_haproxy_load_balancing | bool
        - synchronous_mode | bool

    - name: PostgreSQL Cluster connection info
      run_once: true
      ansible.builtin.debug:
        msg:
          - +------------------------------------------------+
          - address {{ haproxy_nodes }}
          - port {{ haproxy_listen_port.master }} (read/write) master
          - port {{ haproxy_listen_port.replicas }} (read only)  all replicas
          - +------------------------------------------------+
      when:
        - with_haproxy_load_balancing | bool
        - not synchronous_mode | bool

    - name: PostgreSQL Cluster connection info
      run_once: true
      ansible.builtin.debug:
        msg:
          - +------------------------------------------------+
          - address {{ postgres_cluster_nodes }}
          - port {% if pgbouncer_install %}{{ pgbouncer_listen_port }} (pgbouncer){% else %}{{ postgresql_port }}{% endif %}
          - +------------------------------------------------+
      when:
        - not with_haproxy_load_balancing | bool
  ignore_errors: true
  when:
    - (cluster_vip is not defined or cluster_vip | length < 1)
    - dcs_type == "etcd"
  tags: conn_info, cluster_info, cluster_status


- block:  # if dcs_type: "consul"
    - name: PostgreSQL Cluster connection info
      run_once: true
      ansible.builtin.debug:
        msg:
          - +------------------------------------------------+
          - "Client access point (DNS):"
          - " master.{{ patroni_cluster_name }}.service.consul "
          - " replica.{{ patroni_cluster_name }}.service.consul "
          - port {% if pgbouncer_install %}{{ pgbouncer_listen_port }} (pgbouncer){% else %}{{ postgresql_port }}{% endif %}
          - +------------------------------------------------+
      when: not synchronous_mode | bool

    - name: PostgreSQL Cluster connection info
      run_once: true
      ansible.builtin.debug:
        msg:
          - +------------------------------------------------+
          - "Client access point (DNS):"
          - " master.{{ patroni_cluster_name }}.service.consul "
          - " replica.{{ patroni_cluster_name }}.service.consul "
          - " sync-replica.{{ patroni_cluster_name }}.service.consul "
          - " async-replica.{{ patroni_cluster_name }}.service.consul "
          - port {% if pgbouncer_install %}{{ pgbouncer_listen_port }} (pgbouncer){% else %}{{ postgresql_port }}{% endif %}
          - +------------------------------------------------+
      when: synchronous_mode | bool
  when: dcs_type == "consul"

...
