---
- name: Get a list of old PostgreSQL extensions
  ansible.builtin.command: >-
    psql -d {{ pg_target_dbname }} -tAXc "select
    extname from pg_extension e
    join pg_available_extensions ae on extname = ae.name
    where installed_version <> default_version"
  register: pg_old_extensions
  changed_when: false
  when:
    - patroni_leader_result.status == 200

# if there are no old extensions
- name: The extensions are up-to-date
  ansible.builtin.debug:
    msg:
      - "The extension versions are up-to-date for the database {{ pg_target_dbname }}"
      - "No update is required."
  when: pg_old_extensions.stdout_lines | length < 1

# excluding: 'pg_repack' (is exists), as it requires re-creation to update
- name: Update old PostgreSQL extensions
  ansible.builtin.command: >-
    psql -d {{ pg_target_dbname }} -tAXc "ALTER EXTENSION {{ item }} UPDATE"
  ignore_errors: true
  loop: "{{ pg_old_extensions.stdout_lines | reject('match', '^pg_repack$') | list }}"
  register: pg_old_extensions_update_result
  when:
    - patroni_leader_result.status == 200
    - (pg_old_extensions.stdout_lines | length > 0
       and not 'pg_stat_kcache' in pg_old_extensions.stdout_lines)

# if pg_stat_kcache is exists
- block:
    # excluding: 'pg_stat_statements', because extension pg_stat_kcache depends on it (will be re-created)
    - name: Update old PostgreSQL extensions
      ansible.builtin.command: >-
        psql -d {{ pg_target_dbname }} -tAXc "ALTER EXTENSION {{ item }} UPDATE"
      ignore_errors: true
      loop: "{{ pg_old_extensions.stdout_lines | reject('match', '^(pg_repack|pg_stat_statements|pg_stat_kcache)$') | list }}"
      register: pg_old_extensions_update_result

    # re-create 'pg_stat_statements' and 'pg_stat_kcache' if an update is required
    - name: Recreate old pg_stat_statements and pg_stat_kcache extensions to update
      ansible.builtin.command: >-
        psql -d {{ pg_target_dbname }} -tAXc "
        DROP EXTENSION pg_stat_statements CASCADE;
        CREATE EXTENSION pg_stat_statements;
        CREATE EXTENSION pg_stat_kcache"
  when:
    - patroni_leader_result.status == 200
    - pg_old_extensions.stdout_lines | length > 0
    - ('pg_stat_statements' in pg_old_extensions.stdout_lines or
       'pg_stat_kcache' in pg_old_extensions.stdout_lines)

# re-create the 'pg_repack' if it exists and an update is required
- name: Recreate old pg_repack extension to update
  ansible.builtin.command: >-
    psql -d {{ pg_target_dbname }} -tAXc "
    DROP EXTENSION pg_repack;
    CREATE EXTENSION pg_repack;"
  when:
    - patroni_leader_result.status == 200
    - (pg_old_extensions.stdout_lines | length > 0
       and 'pg_repack' in pg_old_extensions.stdout_lines)
...
