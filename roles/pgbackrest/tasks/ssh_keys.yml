---

- name: Ensure that the openssh-client package is installed
  become: true
  become_user: root
  ansible.builtin.package:
    name: openssh-client
    state: present
  when: ansible_os_family == "Debian"

- name: Ensure that the openssh-clients package is installed
  become: true
  become_user: root
  ansible.builtin.package:
    name: openssh-clients
    state: present
  when: ansible_os_family == "RedHat"

- name: Ensure "{{ pgbackrest_repo_user }}" exists on pgbackrest server
  ansible.builtin.user:
    name: "{{ pgbackrest_repo_user }}"
    state: present
  when: "'pgbackrest' in group_names"

- name: ssh_keys | Ensure ssh key are created for "{{ pgbackrest_repo_user }}" user on pgbackrest server
  ansible.builtin.user:
    name: "{{ pgbackrest_repo_user }}"
    generate_ssh_key: true
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_rsa
  when: "'pgbackrest' in group_names"

- name: ssh_keys | Ensure ssh key are created for "postgres" user on database servers
  ansible.builtin.user:
    name: "postgres"
    generate_ssh_key: true
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_rsa
  when: "'postgres_cluster' in group_names"

- name: ssh_keys | Get public ssh key from pgbackrest server
  ansible.builtin.slurp:
    src: "~{{ pgbackrest_repo_user }}/.ssh/id_rsa.pub"
  register: pgbackrest_sshkey
  changed_when: false
  when: "'pgbackrest' in group_names"

- name: ssh_keys | Get public ssh key from database servers
  ansible.builtin.slurp:
    src: "~postgres/.ssh/id_rsa.pub"
  register: postgres_cluster_sshkey
  changed_when: false
  when: "'postgres_cluster' in group_names"

- name: ssh_keys | Add pgbackrest ssh key in "~postgres/.ssh/authorized_keys" on database servers
  ansible.posix.authorized_key:
    user: postgres
    state: present
    key: "{{ hostvars[item].pgbackrest_sshkey['content'] | b64decode }}"
  loop: "{{ groups['pgbackrest'] }}"
  when: "'postgres_cluster' in group_names"

- name: ssh_keys | Add database ssh keys in "~{{ pgbackrest_repo_user }}/.ssh/authorized_keys" on pgbackrest server
  ansible.posix.authorized_key:
    user: "{{ pgbackrest_repo_user }}"
    state: present
    key: "{{ hostvars[item].postgres_cluster_sshkey['content'] | b64decode }}"
  loop: "{{ groups['postgres_cluster'] }}"
  when: "'pgbackrest' in group_names"

- name: known_hosts | Get public ssh keys of hosts (ssh-keyscan)
  ansible.builtin.command: "ssh-keyscan -trsa -p {{ ansible_ssh_port | default(22) }} {{ item }}"
  loop: "{{ groups['all'] }}"
  register: ssh_known_host_keyscan
  changed_when: false

- name: known_hosts | add ssh public keys in "~postgres/.ssh/known_hosts" on database servers
  become: true
  become_user: postgres
  ansible.builtin.known_hosts:
    host: "{{ item.item }}"
    key: "{{ item.stdout }}"
    path: "~postgres/.ssh/known_hosts"
  no_log: true
  loop: "{{ ssh_known_host_keyscan.results }}"
  when: "'postgres_cluster' in group_names"

- name: known_hosts | add ssh public keys in "~{{ pgbackrest_repo_user }}/.ssh/known_hosts" on pgbackrest server
  become: true
  become_user: "{{ pgbackrest_repo_user }}"
  ansible.builtin.known_hosts:
    host: "{{ item.item }}"
    key: "{{ item.stdout }}"
    path: "~{{ pgbackrest_repo_user }}/.ssh/known_hosts"
  no_log: true
  loop: "{{ ssh_known_host_keyscan.results }}"
  when: "'pgbackrest' in group_names"

...
