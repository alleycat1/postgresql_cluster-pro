---

- block:  # Debian pgdg repo
    - name: Make sure the gnupg and apt-transport-https packages are present
      ansible.builtin.apt:
        pkg:
          - gnupg
          - apt-transport-https
        state: present
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3

    - name: Make sure pgdg apt key is installed
      ansible.builtin.apt_key:
        id: ACCC4CF8
        url: https://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc

    - name: Make sure pgdg repository is installed
      ansible.builtin.apt_repository:
        repo: "deb https://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
  environment: "{{ proxy_env | default({}) }}"
  when:
    - installation_method == "repo"
    - ansible_os_family == "Debian"
    - pgbackrest_install_from_pgdg_repo|bool
  tags: pgbackrest, pgbackrest_repo, pgbackrest_install

- block:  # RedHat pgdg repo
    - name: Get pgdg-redhat-repo-latest.noarch.rpm
      ansible.builtin.get_url:
        url: "https://download.postgresql.org/pub/repos/yum/reporpms/EL-{{ ansible_distribution_major_version }}-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
        dest: /tmp/
        timeout: 30
        validate_certs: false

    - name: Make sure pgdg repository is installed
      ansible.builtin.package:
        name: /tmp/pgdg-redhat-repo-latest.noarch.rpm
        state: present
      register: package_status
      until: package_status is success
      delay: 5
      retries: 3

    - name: Clean yum cache
      ansible.builtin.command: yum clean all
      when: ansible_distribution_major_version == '7'

    - name: Clean dnf cache
      ansible.builtin.command: dnf clean all
      when: ansible_distribution_major_version is version('8', '>=')
  environment: "{{ proxy_env | default({}) }}"
  when:
    - installation_method == "repo"
    - ansible_os_family == "RedHat"
    - pgbackrest_install_from_pgdg_repo|bool
  tags: pgbackrest, pgbackrest_repo, pgbackrest_install

# (workaround for CentOS 8.0/8.1)
# install libzstd RPM from an archived EPEL 8.1 release
# The problem will be solved when CentOS 8.2 will be released.
- block:
    - name: Get libzstd rpm package from archived EPEL
      ansible.builtin.get_url:
        url: https://dl.fedoraproject.org/pub/archive/epel/8.1/Everything/x86_64/Packages/l/libzstd-1.4.4-1.el8.x86_64.rpm
        dest: /tmp/
        timeout: 120
        validate_certs: false
      register: get_libzstd_result

    - name: Install libzstd
      ansible.builtin.package:
        name: /tmp/libzstd-1.4.4-1.el8.x86_64.rpm
        state: present
      register: package_status
      until: package_status is success
      delay: 5
      retries: 3
      when: get_libzstd_result is changed
  environment: "{{ proxy_env | default({}) }}"
  when:
    - ansible_distribution == "CentOS"
    - ansible_distribution_major_version == '8'
    - ansible_distribution_version is version('8.1', '<=')
  tags: pgbackrest, pgbackrest_install

- name: Install pgbackrest
  ansible.builtin.package:
    name: pgbackrest
    state: present
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  environment: "{{ proxy_env | default({}) }}"
  tags: pgbackrest, pgbackrest_install

- block:
    - name: Ensure config directory exist
      ansible.builtin.file:
        path: "{{ pgbackrest_conf_file | dirname }}"
        state: directory
        owner: postgres
        group: postgres

    - name: "Generate conf file {{ pgbackrest_conf_file }}"
      ansible.builtin.template:
        src: pgbackrest.conf.j2
        dest: "{{ pgbackrest_conf_file }}"
        owner: postgres
        group: postgres
        mode: "0644"
  when: "'postgres_cluster' in group_names"
  tags: pgbackrest, pgbackrest_conf

# Dedicated pgbackrest server (if "repo_host" is set)
- block:
    - name: Ensure config directory exist
      ansible.builtin.file:
        path: "{{ pgbackrest_conf_file | dirname }}"
        state: directory
        owner: "{{ pgbackrest_repo_user }}"
        group: "{{ pgbackrest_repo_user }}"

    - name: Ensure stanza config directory exist
      ansible.builtin.file:
        path: "{{ pgbackrest_conf_file | dirname }}/conf.d"
        state: directory
        owner: "{{ pgbackrest_repo_user }}"
        group: "{{ pgbackrest_repo_user }}"

    - name: "Generate global conf file {{ pgbackrest_conf_file }}"
      ansible.builtin.template:
        src: pgbackrest.server.conf.j2
        dest: "{{ pgbackrest_conf_file }}"
        owner: "{{ pgbackrest_repo_user }}"
        group: "{{ pgbackrest_repo_user }}"
        mode: "0644"

    - name: "Generate stanza conf file {{ pgbackrest_conf_file | dirname }}/conf.d/{{ pgbackrest_stanza }}.conf"
      ansible.builtin.template:
        src: pgbackrest.server.stanza.conf.j2
        dest: "{{ pgbackrest_conf_file | dirname }}/conf.d/{{ pgbackrest_stanza }}.conf"
        owner: "{{ pgbackrest_repo_user }}"
        group: "{{ pgbackrest_repo_user }}"
        mode: "0644"
  when:
    - "'pgbackrest' in group_names"
    - pgbackrest_repo_host is defined
    - pgbackrest_repo_host | length > 0
  tags: pgbackrest, pgbackrest_conf

# if pgbackrest_repo_type: "posix" and pgbackrest_repo_host is set
- ansible.builtin.import_tasks: ssh_keys.yml
  when:
    - pgbackrest_repo_type|lower == "posix"
    - pgbackrest_repo_host is defined
    - pgbackrest_repo_host | length > 0
  tags: pgbackrest, pgbackrest_ssh_keys

- ansible.builtin.import_tasks: cron.yml
  when:
    - pgbackrest_cron_jobs is defined
    - pgbackrest_cron_jobs | length > 0
  tags: pgbackrest, pgbackrest_cron

# - import_tasks: bootstrap_script.yml
#  when:
#    - patroni_cluster_bootstrap_method is defined
#    - patroni_cluster_bootstrap_method == "pgbackrest"
#    - "'postgres_cluster' in group_names"
#  tags: pgbackrest, pgbackrest_bootstrap_script


...
