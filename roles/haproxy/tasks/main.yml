---

# Install HAProxy from rpm/deb packages
# from repo
- block:
    # RedHat/CentOS/OracleLinux 7 (SCL)
    - name: Install Software Collections (SCL) repository for CentOS 7
      ansible.builtin.package:
        name: centos-release-scl-rh
        state: present
      register: package_status
      until: package_status is success
      delay: 5
      retries: 3
      when: haproxy_install_repo|bool and
            (ansible_distribution == 'CentOS' and
            ansible_distribution_major_version == '7')
      tags: haproxy_scl_repo

    - name: Install Software Collections (SCL) repository for OracleLinux 7
      ansible.builtin.yum_repository:
        name: ol7_software_collections
        description: Software Collection Library packages for Oracle Linux 7 (x86_64)
        baseurl: https://yum.oracle.com/repo/OracleLinux/OL7/SoftwareCollections/x86_64/
        gpgkey: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
        gpgcheck: true
        enabled: true
      when: haproxy_install_repo|bool and
            (ansible_distribution == "OracleLinux" and
            ansible_distribution_major_version == '7')
      tags: haproxy_scl_repo

    - name: Enable Software Collections (SCL) repository for RedHat 7
      become: true
      become_user: root
      ansible.builtin.command: subscription-manager repos --enable rhel-server-rhscl-7-rpms
      when: haproxy_install_repo|bool and
            (ansible_distribution == 'RedHat' and
            ansible_distribution_major_version == '7')
      tags: haproxy_scl_repo

    - name: Install HAProxy v1.8 (rh-haproxy18 package)
      ansible.builtin.package:
        name: rh-haproxy18
        state: present
      register: package_status
      until: package_status is success
      delay: 5
      retries: 3
      when: ansible_distribution_major_version == '7'

    - name: create a symlink "/usr/sbin/haproxy"
      ansible.builtin.file:
        src: /opt/rh/rh-haproxy18/root/usr/sbin/haproxy
        dest: /usr/sbin/haproxy
        owner: root
        group: root
        state: link
      when: ansible_distribution_major_version == '7'
  environment: "{{ proxy_env | default({}) }}"
  when: ansible_os_family == "RedHat" and
        installation_method == "repo" and
        haproxy_installation_method == "rpm"
  tags: haproxy, load_balancing

- block:
    # RedHat os family version 8 (and higher)
    - name: Install HAProxy package
      ansible.builtin.package:
        name: haproxy
        state: present
      register: package_status
      until: package_status is success
      delay: 5
      retries: 3
      when: ansible_distribution_major_version is version('8', '>=')
  environment: "{{ proxy_env | default({}) }}"
  when: ansible_os_family == "RedHat" and
        installation_method == "repo" and
        haproxy_installation_method == "rpm"
  tags: haproxy, load_balancing

- block:
    # Debian
    - name: Add haproxy.debian.net repository apt-key
      ansible.builtin.apt_key:
        url: https://haproxy.debian.net/bernat.debian.org.gpg
        state: present
      when: haproxy_install_repo|bool and
            (ansible_distribution == "Debian" and
            ansible_distribution_major_version is version('10', '<='))

    - name: Add haproxy.debian.net repository
      ansible.builtin.apt_repository:
        repo: "deb https://haproxy.debian.net {{ ansible_distribution_release }}-backports-1.8 main"
        state: present
        update_cache: true
      when: haproxy_install_repo|bool and
            (ansible_distribution == "Debian" and
            ansible_distribution_major_version is version('10', '<='))

    # Ubuntu
    - name: Add ppa:vbernat/haproxy-1.8 repository apt-key
      ansible.builtin.apt_key:  # https://github.com/ansible/ansible/issues/31691
        data: |
          -----BEGIN PGP PUBLIC KEY BLOCK-----

          xo0EUa70wAEEAMtI29s01PCX0JleVmh1QQr3rfPkfGo/GFKfcXRGE40nQHq+rWUh
          9slUN+kXBckSE0DDrnQH08Uvf12TJiHHFlbXnH5Ep+hgYPZGlVSpvBGO+c/CopU7
          RHMx9bl+pVOhrVeDWqLl2KqJI2wjJBLXA0dbRbCzmXPvrg3mBQ0hZ533ABEBAAHN
          IExhdW5jaHBhZCBQUEEgZm9yIFZpbmNlbnQgQmVybmF0wrgEEwECACIFAlGu9MAC
          GwMGCwkIBwMCBhUIAgkKCwQWAgMBAh4BAheAAAoJEFBdl6QcYbnN8aMD/RM3InMu
          bxTF9hzToCPF2EP37Q9WUQNF15f90jTOl8VqqpnUfGd2qlxUW31soCpDVxqX6lXf
          qB0bI9EDz2r7w+goxBH+cRArJ2APdC7wE/U9eIxY49mzNsqjsl7zY+eoX4v4fjqk
          33hFyMMJDUtPxSRHWFqP5QNwCN+fbPh5GiyL
          =ZiOf
          -----END PGP PUBLIC KEY BLOCK-----
        state: present
      when: haproxy_install_repo|bool and
            (ansible_distribution == 'Ubuntu' and
            ansible_distribution_major_version is version('18', '<='))

    - name: Add ppa:vbernat/haproxy-1.8 repository
      ansible.builtin.apt_repository:
        repo: "deb http://ppa.launchpad.net/vbernat/haproxy-1.8/ubuntu {{ ansible_distribution_release }} main"
        state: present
        update_cache: true
      when: haproxy_install_repo|bool and
            (ansible_distribution == 'Ubuntu' and
            ansible_distribution_major_version is version('18', '<='))

    - name: Install HAProxy v1.8 package
      ansible.builtin.apt:
        force_apt_get: true
        name: "haproxy=1.8.*"
        state: present
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      when: (ansible_distribution == "Debian" and ansible_distribution_major_version is version('10', '<=')) or
            (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version is version('18', '<='))

    - name: Install HAProxy package
      ansible.builtin.apt:
        name: haproxy
        state: present
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      when: (ansible_distribution == "Debian" and ansible_distribution_major_version is version('11', '>=')) or
            (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version is version('20', '>='))
  environment: "{{ proxy_env | default({}) }}"
  when: ansible_os_family == "Debian" and
        installation_method == "repo" and
        haproxy_installation_method == "deb"
  tags: haproxy, load_balancing

# from file (rpm/deb packages)
- block:
    - name: Copy packages into /tmp
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /tmp/
      loop: "{{ haproxy_package_file }}"
      register: copy_packages_result

    - name: Install packages
      ansible.builtin.apt:
        force_apt_get: true
        deb: "/tmp/{{ item }}"
        state: present
      loop: "{{ haproxy_package_file | map('basename') | list }}"
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      when: ansible_os_family == "Debian" and copy_packages_result.changed

    - name: Install packages
      ansible.builtin.package:
        name: "/tmp/{{ item }}"
        state: present
      loop: "{{ haproxy_package_file | map('basename') | list }}"
      register: package_status
      until: package_status is success
      delay: 5
      retries: 3
      when: ansible_os_family == "RedHat" and copy_packages_result.changed
  when: haproxy_package_file is defined and haproxy_package_file | length > 0
  tags: haproxy, load_balancing

# Build and install HAproxy from source
- name: Setting facts
  ansible.builtin.set_fact:
    target_linux: "{% if haproxy_major is version('2.0', '>=') %}linux-glibc{% else %}linux2628{% endif %}"
  when: haproxy_installation_method == "src"
  tags: haproxy, load_balancing

# from repo
- block:
    - name: "Download HAProxy and lua source files"
      ansible.builtin.get_url:
        url: "{{ item }}"
        dest: /tmp/
        timeout: 120
        validate_certs: false
      loop:
        - "{{ haproxy_src_repo }}"
        - "{{ lua_src_repo }}"
      environment: "{{ proxy_env | default({}) }}"

    - name: "Extract HAProxy source files into /tmp"
      ansible.builtin.unarchive:
        src: "/tmp/{{ haproxy_src_repo | basename }}"
        dest: /tmp/
        extra_opts:
          - --no-same-owner
        remote_src: true
      when: haproxy_src_repo | length > 0

    - name: "Extract lua source files into /tmp"
      ansible.builtin.unarchive:
        src: "/tmp/{{ lua_src_repo | basename }}"
        dest: /tmp/
        extra_opts:
          - --no-same-owner
        remote_src: true
      when: lua_src_repo | length > 0
      tags: lua
  when: installation_method == "repo" and haproxy_installation_method == "src"
  tags: haproxy, load_balancing

# from file
- block:
    - name: "Extract HAProxy source files into /tmp"
      ansible.builtin.unarchive:
        src: "{{ haproxy_src_file }}"
        dest: /tmp/
        extra_opts:
          - --no-same-owner
      when: haproxy_src_file | length > 0

    - name: "Extract lua source files into /tmp"
      ansible.builtin.unarchive:
        src: "{{ lua_src_file }}"
        dest: /tmp/
        extra_opts:
          - --no-same-owner
      when: lua_src_file | length > 0
      tags: lua
  when: installation_method == "file" and haproxy_installation_method == "src"
  tags: haproxy, load_balancing

- name: Install the prerequisites packages to compile HAProxy
  ansible.builtin.package:
    name: "{{ haproxy_compile_requirements }}"
    state: present
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  environment: "{{ proxy_env | default({}) }}"
  when: haproxy_installation_method == "src"
  tags: haproxy, haproxy_requirements, load_balancing

- block:
    - name: Build and install lua (required for haproxy)
      become: true
      become_user: root
      ansible.builtin.shell: "make INSTALL_TOP=/opt/{{ lua_src_repo.split('.tar.gz')[0] | basename }} linux install"
      args:
        chdir: "/tmp/{{ lua_src_repo.split('.tar.gz')[0] | basename }}"
      tags: lua

    - name: Build HAProxy
      become: true
      become_user: root
      community.general.make:
        chdir: "/tmp/{{ haproxy_src_repo.split('.tar.gz')[0] | basename }}"
        params:
          TARGET: "{{ target_linux }}"
          USE_GETADDRINFO: 1
          USE_ZLIB: 1
          USE_REGPARM: 1
          USE_OPENSSL: 1
          USE_LIBCRYPT: 1
          USE_SYSTEMD: 1
          USE_PCRE: 1
          USE_NS: 1
          USE_TFO: 1
          USE_LUA: 1
          LUA_INC: "/opt/{{ lua_src_repo.split('.tar.gz')[0] | basename }}/include"
          LUA_LIB: "/opt/{{ lua_src_repo.split('.tar.gz')[0] | basename }}/lib"

    - name: Install HAProxy
      become: true
      become_user: root
      community.general.make:
        chdir: "/tmp/{{ haproxy_src_repo.split('.tar.gz')[0] | basename }}"
        target: install
  when: installation_method == "repo" and haproxy_installation_method == "src"
  tags: haproxy, load_balancing

# installation_method: "file"
- block:
    - name: Build and install lua (required for haproxy)
      become: true
      become_user: root
      ansible.builtin.shell: "make INSTALL_TOP=/opt/{{ lua_src_file.split('.tar.gz')[0] | basename }} linux install"
      args:
        chdir: "/tmp/{{ lua_src_file.split('.tar.gz')[0] | basename }}"
      tags: lua

    - name: Build HAProxy
      become: true
      become_user: root
      community.general.make:
        chdir: "/tmp/{{ haproxy_src_file.split('.tar.gz')[0] | basename }}"
        params:
          TARGET: "{{ target_linux }}"
          USE_GETADDRINFO: 1
          USE_ZLIB: 1
          USE_REGPARM: 1
          USE_OPENSSL: 1
          USE_LIBCRYPT: 1
          USE_SYSTEMD: 1
          USE_PCRE: 1
          USE_NS: 1
          USE_TFO: 1
          USE_LUA: 1
          LUA_INC: "/opt/{{ lua_src_file.split('.tar.gz')[0] | basename }}/include"
          LUA_LIB: "/opt/{{ lua_src_file.split('.tar.gz')[0] | basename }}/lib"

    - name: Install HAProxy
      become: true
      become_user: root
      community.general.make:
        chdir: "/tmp/{{ haproxy_src_file.split('.tar.gz')[0] | basename }}"
        target: install
  when: installation_method == "file" and haproxy_installation_method == "src"
  tags: haproxy, load_balancing

# Configure
- name: Make sure the kernel parameter "net.ipv4.ip_nonlocal_bind" are enabled
  ansible.posix.sysctl:
    name: "net.ipv4.ip_nonlocal_bind"
    value: "1"
    sysctl_set: true
    state: present
    reload: true
  ignore_errors: true  # to prevent test failures in CI
  tags: haproxy, load_balancing

- name: Add haproxy group
  ansible.builtin.group:
    name: haproxy
    state: present
  tags: haproxy, load_balancing

- name: Add haproxy user
  ansible.builtin.user:
    name: haproxy
    comment: "HAProxy user"
    group: haproxy
    shell: /usr/sbin/nologin
  tags: haproxy, load_balancing

- name: Create directories
  ansible.builtin.file:
    dest: "{{ item }}"
    state: directory
    owner: haproxy
    group: haproxy
  loop:
    - /etc/haproxy
    - /run/haproxy
    - /var/lib/haproxy/dev
  tags: haproxy, load_balancing

- name: Generate conf file "/etc/haproxy/haproxy.cfg"
  ansible.builtin.template:
    src: templates/haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
    owner: haproxy
    group: haproxy
  notify: "restart haproxy"
  when: (add_balancer is not defined or not add_balancer|bool) and
        (postgresql_cluster_maintenance is not defined or not postgresql_cluster_maintenance|bool)
  tags: haproxy, haproxy_conf, load_balancing

- name: Generate systemd service file "/etc/systemd/system/haproxy.service"
  ansible.builtin.template:
    src: templates/haproxy.service.j2
    dest: /etc/systemd/system/haproxy.service
    owner: haproxy
    group: haproxy
  notify: "restart haproxy"
  tags: haproxy, haproxy_service, load_balancing

- block:  # for add_balancer.yml
    - name: "Fetch haproxy.cfg file from {{ groups.balancers[0] }}"
      run_once: true
      ansible.builtin.fetch:
        src: /etc/haproxy/haproxy.cfg
        dest: files/haproxy.cfg
        validate_checksum: true
        flat: true
      notify: "restart haproxy"
      delegate_to: "{{ groups.balancers[0] }}"

    - name: Copy haproxy.cfg file to replica
      ansible.builtin.copy:
        src: files/haproxy.cfg
        dest: /etc/haproxy/haproxy.cfg
        owner: haproxy
        group: haproxy
      notify: "restart haproxy"

    - name: Remove haproxy.cfg file from localhost
      become: false
      run_once: true
      ansible.builtin.file:
        path: files/haproxy.cfg
        state: absent
      delegate_to: localhost

    - name: Prepare haproxy.cfg conf file (replace "bind")
      ansible.builtin.lineinfile:
        path: /etc/haproxy/haproxy.cfg
        regexp: "{{ bind_config_without_vip_item.regexp }}"
        line: "{{ bind_config_without_vip_item.line }}"
        backrefs: true
      loop:
        - regexp: '^.*bind.*:{{ haproxy_listen_port.stats }}$'
          line: '    bind {{ hostvars[inventory_hostname].inventory_hostname }}:{{ haproxy_listen_port.stats }}'
        - regexp: '^.*bind.*:{{ haproxy_listen_port.master }}$'
          line: '    bind {{ hostvars[inventory_hostname].inventory_hostname }}:{{ haproxy_listen_port.master }}'
        - regexp: '^.*bind.*:{{ haproxy_listen_port.replicas }}$'
          line: '    bind {{ hostvars[inventory_hostname].inventory_hostname }}:{{ haproxy_listen_port.replicas }}'
        - regexp: '^.*bind.*:{{ haproxy_listen_port.replicas_sync }}$'
          line: '    bind {{ hostvars[inventory_hostname].inventory_hostname }}:{{ haproxy_listen_port.replicas_sync }}'
        - regexp: '^.*bind.*:{{ haproxy_listen_port.replicas_async }}$'
          line: '    bind {{ hostvars[inventory_hostname].inventory_hostname }}:{{ haproxy_listen_port.replicas_async }}'
      loop_control:
        loop_var: bind_config_without_vip_item
        label: "{{ bind_config_without_vip_item.line }}"
      notify: "restart haproxy"
      when: cluster_vip is not defined or cluster_vip | length < 1

    - name: Prepare haproxy.cfg conf file (replace "bind" for stats)
      ansible.builtin.lineinfile:
        path: /etc/haproxy/haproxy.cfg
        regexp: "{{ bind_config_with_vip_item.regexp }}"
        line: "{{ bind_config_with_vip_item.line }}"
        backrefs: true
      loop:
        - regexp: '^.*bind.*:{{ haproxy_listen_port.stats }}$'
          line: '    bind {{ hostvars[inventory_hostname].inventory_hostname }}:{{ haproxy_listen_port.stats }}'
        - regexp: '^.*bind.*:{{ haproxy_listen_port.master }}$'
          line: '    bind {{ cluster_vip }}:{{ haproxy_listen_port.master }}'
        - regexp: '^.*bind.*:{{ haproxy_listen_port.replicas }}$'
          line: '    bind {{ cluster_vip }}:{{ haproxy_listen_port.replicas }}'
        - regexp: '^.*bind.*:{{ haproxy_listen_port.replicas_sync }}$'
          line: '    bind {{ cluster_vip }}:{{ haproxy_listen_port.replicas_sync }}'
        - regexp: '^.*bind.*:{{ haproxy_listen_port.replicas_async }}$'
          line: '    bind {{ cluster_vip }}:{{ haproxy_listen_port.replicas_async }}'
      loop_control:
        loop_var: bind_config_with_vip_item
        label: "{{ bind_config_with_vip_item.line }}"
      notify: "restart haproxy"
      when: cluster_vip is defined and cluster_vip | length > 0
  when: add_balancer is defined and add_balancer|bool
  tags: haproxy, haproxy_conf, load_balancing

- block:
    - name: selinux | make sure the libsemanage-python, policycoreutils-python packages is present
      ansible.builtin.package:
        name: "{{ packages }}"
        state: present
        update_cache: true
      vars:
        packages:
          - libsemanage-python
          - policycoreutils-python
      register: package_status
      until: package_status is success
      delay: 5
      retries: 3
      environment: "{{ proxy_env | default({}) }}"
      when:
        - ansible_os_family == "RedHat"
        - ansible_distribution_major_version == '7'
        - installation_method == "repo"
        - haproxy_installation_method == "rpm"

    - name: selinux | make sure the python3-libsemanage, python3-policycoreutils packages is present
      ansible.builtin.package:
        name: "{{ packages }}"
        state: present
        update_cache: true
      vars:
        packages:
          - python3-libsemanage
          - python3-policycoreutils
      register: package_status
      until: package_status is success
      delay: 5
      retries: 3
      environment: "{{ proxy_env | default({}) }}"
      when:
        - ansible_os_family == "RedHat"
        - ansible_distribution_major_version is version('8', '>=')
        - installation_method == "repo"
        - haproxy_installation_method == "rpm"

    - name: selinux | set haproxy_connect_any flag to enable tcp connections
      ansible.posix.seboolean:
        name: haproxy_connect_any
        state: true
        persistent: true

    - name: selinux | change the haproxy_t domain to permissive
      community.general.selinux_permissive:
        name: haproxy_t
        permissive: true
  when: ansible_selinux.status is defined and ansible_selinux.status == 'enabled'
  ignore_errors: true
  tags: haproxy, load_balancing, haproxy_selinux

...
