---

- name: Check if WAL-G is already installed
  ansible.builtin.shell: |
    set -o pipefail;
    wal-g --version | awk {'print $3'} | tr -d 'v'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: wal_g_installed_version
  environment:
    PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
  tags: wal-g, wal_g, wal_g_install

- name: WAL-G check result
  ansible.builtin.debug:
    msg: "WAL-G is already installed, version {{ wal_g_installed_version.stdout }}. Skip the installation."
  when:
    - wal_g_installed_version.rc == 0
    - wal_g_installed_version.stdout == wal_g_version
  tags: wal-g, wal_g, wal_g_install

# Install WAL-G from a precompiled binary for Ubuntu 18.04 and 20.04
- block:
    - name: "Download WAL-G v{{ wal_g_version }} binary"
      ansible.builtin.get_url:
        url: "https://github.com/wal-g/wal-g/releases/download/v{{ wal_g_version }}/wal-g-pg-ubuntu-{{ ansible_distribution_version }}-amd64.tar.gz"
        dest: /tmp/
        timeout: 60
        validate_certs: false
      environment: "{{ proxy_env | default({}) }}"

    - name: Extract WAL-G into /tmp
      ansible.builtin.unarchive:
        src: "/tmp/wal-g-pg-ubuntu-{{ ansible_distribution_version }}-amd64.tar.gz"
        dest: /tmp/
        extra_opts:
          - --no-same-owner
        remote_src: true

    - name: Copy WAL-G binary file to /usr/local/bin/
      ansible.builtin.copy:
        src: "/tmp/wal-g-pg-ubuntu-{{ ansible_distribution_version }}-amd64"
        dest: /usr/local/bin/wal-g
        mode: u+x,g+x,o+x
        remote_src: true
  when:
    - installation_method == "repo"
    - wal_g_version is version('1.0', '>=')
    - (wal_g_installed_version.stderr is search("command not found") or
       wal_g_installed_version.stdout != wal_g_version)
    - (ansible_distribution == 'Ubuntu' and
       (ansible_distribution_version is version('18.04', '==') or
        ansible_distribution_version is version('20.04', '==')))
  tags: wal-g, wal_g, wal_g_install

# Build WAL-G from source code for other Linux distributions
- block:
    - name: Install lib dependencies to build WAL-G
      ansible.builtin.package:
        name:
          - libbrotli-dev
          # - liblzo2-dev  # https://github.com/wal-g/wal-g/issues/1412
          - libsodium-dev
          - cmake
          - git
        state: present
      register: package_status
      until: package_status is success
      delay: 5
      retries: 3
      when: ansible_os_family == "Debian"

    - name: Install lib dependencies to build WAL-G
      ansible.builtin.package:
        name:
          - brotli-devel
          # - lzo-devel  # https://github.com/wal-g/wal-g/issues/1412
          - libsodium-devel
          - cmake
          - gcc
          - git
        state: present
      register: package_status
      until: package_status is success
      delay: 5
      retries: 3
      when: ansible_os_family == "RedHat"

    - name: Check the installed Go version
      ansible.builtin.shell: |
        set -o pipefail;
        go version | awk {'print $3'} | tr -d 'go'
      args:
        executable: /bin/bash
      changed_when: false
      failed_when: false
      register: go_installed_version
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/go/bin"

    - name: Check the latest available Go version
      ansible.builtin.shell: |
        set -o pipefail;
        curl -s https://go.dev/VERSION?m=text | tr -d 'go'
      args:
        executable: /bin/bash
      changed_when: false
      register: wal_g_latest_version

    - block:  # Install latest Go compiler
        - name: "Download Go v{{ wal_g_latest_version.stdout }}"
          ansible.builtin.get_url:
            url: "https://go.dev/dl/go{{ wal_g_latest_version.stdout }}.linux-amd64.tar.gz"
            dest: /tmp/
            timeout: 60
            validate_certs: false

        - name: Install Go
          ansible.builtin.unarchive:
            src: "/tmp/go{{ wal_g_latest_version.stdout }}.linux-amd64.tar.gz"
            dest: /usr/local/
            extra_opts:
              - --no-same-owner
            remote_src: true
      when: go_installed_version.stderr is search("command not found") or
            go_installed_version.stdout is version(wal_g_latest_version.stdout, '<')

    - name: "Download WAL-G v{{ wal_g_version }} source code"
      ansible.builtin.git:
        repo: https://github.com/wal-g/wal-g.git
        version: v{{ wal_g_version }}
        dest: /tmp/wal-g

    - name: Build WAL-G deps
      become: true
      become_user: root
      community.general.make:
        chdir: /tmp/wal-g/
        target: deps
        params:
          USE_BROTLI: 1
          USE_LIBSODIUM: 1
          # USE_LZO: 1  # https://github.com/wal-g/wal-g/issues/1412
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/go/bin"

    - name: Build and install WAL-G
      become: true
      become_user: root
      community.general.make:
        chdir: /tmp/wal-g/
        target: pg_install
        params:
          USE_BROTLI: 1
          USE_LIBSODIUM: 1
          # USE_LZO: 1  # https://github.com/wal-g/wal-g/issues/1412
          GOBIN: /usr/local/bin
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/go/bin"
  environment: "{{ proxy_env | default({}) }}"
  when:
    - installation_method == "repo"
    - wal_g_version is version('1.0', '>=')
    - (wal_g_installed_version.stderr is search("command not found") or
       wal_g_installed_version.stdout != wal_g_version)
    - not (ansible_distribution == 'Ubuntu' and
           (ansible_distribution_version is version('18.04', '==') or
            ansible_distribution_version is version('20.04', '==')))
  tags: wal-g, wal_g, wal_g_install

# older versions of WAL-G (for compatibility)
- block:
    - name: "Download WAL-G v{{ wal_g_version }} binary"
      ansible.builtin.get_url:
        url: "https://github.com/wal-g/wal-g/releases/download/v{{ wal_g_version }}/wal-g.linux-amd64.tar.gz"
        dest: /tmp/
        timeout: 60
        validate_certs: false
      environment: "{{ proxy_env | default({}) }}"

    - name: Extract WAL-G into /tmp
      ansible.builtin.unarchive:
        src: "/tmp/wal-g.linux-amd64.tar.gz"
        dest: /tmp/
        extra_opts:
          - --no-same-owner
        remote_src: true

    - name: Copy WAL-G binary file to /usr/local/bin/
      ansible.builtin.copy:
        src: "/tmp/wal-g"
        dest: /usr/local/bin/
        mode: u+x,g+x,o+x
        remote_src: true
  when:
    - installation_method == "repo"
    - wal_g_version is version('0.2.19', '<=')
    - (wal_g_installed_version.stderr is search("command not found") or
       wal_g_installed_version.stdout != wal_g_version)
  tags: wal-g, wal_g, wal_g_install

# installation_method == "file"

# A precompiled binary (package in tar.gz)
- block:
    - name: "Extract WAL-G archive {{ wal_g_package_file }} into /tmp"
      ansible.builtin.unarchive:
        src: "{{ wal_g_package_file }}"
        dest: /tmp/
        extra_opts:
          - --no-same-owner

    - name: Copy WAL-G binary file to /usr/local/bin/
      ansible.builtin.copy:
        src: "/tmp/{{ wal_g_package_file.split('.tar.gz')[0] | basename }}"
        dest: /usr/local/bin/wal-g
        mode: u+x,g+x,o+x
        remote_src: true
  when:
    - installation_method == "file"
    - wal_g_version is version('1.0', '>=')
    - (wal_g_installed_version.stderr is search("command not found") or
       wal_g_installed_version.stdout != wal_g_version)
    - (wal_g_package_file is defined and wal_g_package_file | length > 0)
  tags: wal-g, wal_g, wal_g_install

# older versions of WAL-G (for compatibility)
- block:
    - name: "Extract WAL-G archive {{ wal_g_package_file }} into /tmp"
      ansible.builtin.unarchive:
        src: "{{ wal_g_package_file }}"
        dest: /tmp/
        extra_opts:
          - --no-same-owner

    - name: Copy WAL-G binary file to /usr/local/bin/
      ansible.builtin.copy:
        src: "/tmp/wal-g"
        dest: /usr/local/bin/
        mode: u+x,g+x,o+x
        remote_src: true
  when:
    - installation_method == "file"
    - wal_g_version is version('0.2.19', '<=')
    - (wal_g_installed_version.stderr is search("command not found") or
       wal_g_installed_version.stdout != wal_g_version)
    - wal_g_package_file == "wal-g.linux-amd64.tar.gz"
  tags: wal-g, wal_g, wal_g_install

# Configure walg.json
- name: "Generate conf file {{ postgresql_home_dir }}/.walg.json"
  ansible.builtin.template:
    src: templates/walg.json.j2
    dest: "{{ postgresql_home_dir }}/.walg.json"
    owner: postgres
    group: postgres
    mode: "0644"
  tags: wal-g, wal_g, wal_g_conf

- ansible.builtin.import_tasks: cron.yml
  when:
    - wal_g_cron_jobs is defined
    - wal_g_cron_jobs | length > 0
  tags: wal-g, wal_g, wal_g_cron

...
