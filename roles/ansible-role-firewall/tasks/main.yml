---

- name: Ensure iptables is present.
  ansible.builtin.package:
    name: iptables
    state: present
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3

- name: Flush iptables the first time playbook runs.
  ansible.builtin.command: >
    iptables -F
    creates=/etc/firewall.bash

- name: Copy firewall script into place.
  ansible.builtin.template:
    src: firewall.bash.j2
    dest: /etc/firewall.bash
    owner: root
    group: root
    mode: "0744"
  notify: restart firewall

- name: Copy firewall init script into place.
  ansible.builtin.template:
    src: firewall.init.j2
    dest: /etc/init.d/firewall
    owner: root
    group: root
    mode: "0755"
  when: "ansible_service_mgr != 'systemd'"

- name: Copy firewall systemd unit file into place (for systemd systems).
  ansible.builtin.template:
    src: firewall.unit.j2
    dest: /etc/systemd/system/firewall.service
    owner: root
    group: root
    mode: "0644"
  when: "ansible_service_mgr == 'systemd'"

# prevents firewall initialization from severing the SSH connection
- block:
    - name: Load the nf_conntrack_ipv4 module
      community.general.modprobe:
        name: nf_conntrack_ipv4
        state: present
      when: ansible_kernel is version('4.19', '<') and
            not (ansible_os_family == "RedHat" and ansible_distribution_version is version('8.3', '>='))

    - name: Load the nf_conntrack module
      community.general.modprobe:
        name: nf_conntrack
        state: present
      when: ansible_kernel is version('4.19', '>=') or
            (ansible_os_family == "RedHat" and ansible_distribution_version is version('8.3', '>='))

    - name: sysctl | keep connections alive when enabling the firewall
      ansible.posix.sysctl:
        name: net.netfilter.nf_conntrack_tcp_be_liberal
        value: "1"
        state: present
        sysctl_set: true
        reload: true
      failed_when: false  # to prevent failures in CI
  ignore_errors: true

- name: Configure the firewall service.
  ansible.builtin.service:
    name: firewall
    state: "{{ firewall_state }}"
    enabled: "{{ firewall_enabled_at_boot }}"

- ansible.builtin.import_tasks: disable-other-firewalls.yml
  when: firewall_disable_firewalld|bool or firewall_disable_ufw|bool

...
