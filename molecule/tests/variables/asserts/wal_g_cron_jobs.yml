---
# üöÄ These tasks aim to define and verify 'wal_g_cron_jobs' for different OS
# üéØ The objective is to ensure accurate setup and validation of wal-g cron jobs

# üìù Validate the structure and content of wal_g_cron_jobs. We expect two jobs, each with specific attributes.
- name: Molecule.tests.variables.asserts.wal_g_cron_jobs | Validate Structure and Content of wal_g_cron_jobs
  run_once: true
  ansible.builtin.assert:
    that:
      - wal_g_cron_jobs | length == 2
      - wal_g_cron_jobs[0].name == "WAL-G: Create daily backup"
      - wal_g_cron_jobs[0].user == "postgres"
      - wal_g_cron_jobs[0].file == "/etc/cron.d/walg"
      - wal_g_cron_jobs[0].job == wal_g_backup_command | join('')
      - wal_g_cron_jobs[1].name == "WAL-G: Delete old backups"
      - wal_g_cron_jobs[1].user == "postgres"
      - wal_g_cron_jobs[1].file == "/etc/cron.d/walg"
      - wal_g_cron_jobs[1].job == wal_g_delete_command | join('')
    fail_msg: "Test failed: wal_g_cron_jobs does not have the expected structure or content."
    success_msg: "Test passed: wal_g_cron_jobs has the expected structure and content."

# üìù Validate the content of wal_g_backup_command and wal_g_delete_command. We expect specific commands for each job.
- name: Molecule.tests.variables.asserts.wal_g_cron_jobs | Validate Content of wal_g_backup_command and wal_g_delete_command
  run_once: true
  ansible.builtin.assert:
    that:
      - wal_g_backup_command[0] == "[ $(curl -s -o /dev/null -w '%{http_code}' http://{{ inventory_hostname }}:{{ patroni_restapi_port }}) = '200' ]"
      - wal_g_backup_command[1] == " && wal-g backup-push {{ postgresql_data_dir }} > {{ postgresql_log_dir }}/walg_backup.log 2>&1"
      - wal_g_delete_command[0] == "[ $(curl -s -o /dev/null -w '%{http_code}' http://{{ inventory_hostname }}:{{ patroni_restapi_port }}) = '200' ]"
      - wal_g_delete_command[1] == " && wal-g delete retain FULL 4 --confirm > {{ postgresql_log_dir }}/walg_delete.log 2>&1"
    fail_msg: "Test failed: wal_g_backup_command or wal_g_delete_command do not have the expected content."
    success_msg: "Test passed: wal_g_backup_command and wal_g_delete_command have the expected content."

# ==================================================
# üíæ Start Debian-specific operations and tests
# ==================================================

# üìÅ Load Debian-specific variables for the tests
- name: Molecule.tests.variables.asserts.wal_g_cron_jobs | Debian | Load Debian-specific Variables
  run_once: true
  ansible.builtin.include_vars:
    file: ../../../../vars/Debian.yml

# üîÑ Define the expected first wal_g_cron job for Debian
- name: Molecule.tests.variables.asserts.wal_g_cron_jobs | Debian | Define Expected First wal_g_cron Job
  run_once: true
  ansible.builtin.set_fact: # yamllint disable rule:line-length
    origin_wal_g_cron_jobs_create_job: "[ $(curl -s -o /dev/null -w '%{http_code}' http://{{ inventory_hostname }}:{{ patroni_restapi_port }}) = '200' ] && wal-g backup-push {{ postgresql_data_dir }} > {{ postgresql_log_dir }}/walg_backup.log 2>&1"

# üñ®Ô∏è Display the first wal_g_cron job for Debian for debugging purposes
- name: Molecule.tests.variables.asserts.wal_g_cron_jobs | Debian | Debug First wal_g_cron Job
  run_once: true
  ansible.builtin.debug:
    var: wal_g_cron_jobs[0].job

# ‚úÖ Verify that the first wal_g_cron job for Debian matches the expected job
- name: Molecule.tests.variables.asserts.wal_g_cron_jobs | Debian | Verify First wal_g_cron Job
  run_once: true
  ansible.builtin.assert:
    that:
      - wal_g_cron_jobs[0].job == origin_wal_g_cron_jobs_create_job
    fail_msg: "Test failed: wal_g_cron_jobs[0].job is not as expected."
    success_msg: "Test passed: wal_g_cron_jobs[0].job is as expected."

# üîÑ Define the expected second wal_g_cron job for Debian
- name: Molecule.tests.variables.asserts.wal_g_cron_jobs | Debian | Define Expected Second wal_g_cron Job
  run_once: true
  ansible.builtin.set_fact: # yamllint disable rule:line-length
    origin_wal_g_cron_jobs_delete_job: "[ $(curl -s -o /dev/null -w '%{http_code}' http://{{ inventory_hostname }}:{{ patroni_restapi_port }}) = '200' ] && wal-g delete retain FULL 4 --confirm > {{ postgresql_log_dir }}/walg_delete.log 2>&1"

# üñ®Ô∏è Display the second wal_g_cron job for Debian for debugging purposes
- name: Molecule.tests.variables.asserts.wal_g_cron_jobs | Debian | Debug Second wal_g_cron Job
  run_once: true
  ansible.builtin.debug:
    var: wal_g_cron_jobs[1].job

# ‚úÖ Verify that the second wal_g_cron job for Debian matches the expected job
- name: Molecule.tests.variables.asserts.wal_g_cron_jobs | Debian | Verify Second wal_g_cron Job
  run_once: true
  ansible.builtin.assert:
    that:
      - wal_g_cron_jobs[1].job == origin_wal_g_cron_jobs_delete_job
    fail_msg: "Test failed: wal_g_cron_jobs[1].job is not as expected."
    success_msg: "Test passed: wal_g_cron_jobs[1].job is as expected."

# ==================================================
# üöÄ Start RedHat-specific operations and tests
# ==================================================

# üìÅ Load RedHat-specific variables for the tests
- name: Molecule.tests.variables.asserts.wal_g_cron_jobs | RedHat | Load RedHat-specific Variables
  run_once: true
  ansible.builtin.include_vars:
    file: ../../../../vars/RedHat.yml

# üîÑ Define the expected first wal_g_cron job for RedHat
- name: Molecule.tests.variables.asserts.wal_g_cron_jobs | RedHat | Define Expected First wal_g_cron Job
  run_once: true
  ansible.builtin.set_fact: # yamllint disable rule:line-length
    origin_wal_g_cron_jobs_create_job: "[ $(curl -s -o /dev/null -w '%{http_code}' http://{{ inventory_hostname }}:{{ patroni_restapi_port }}) = '200' ] && wal-g backup-push {{ postgresql_data_dir }} > {{ postgresql_log_dir }}/walg_backup.log 2>&1"

# üñ®Ô∏è Display the first wal_g_cron job for RedHat for debugging purposes
- name: Molecule.tests.variables.asserts.wal_g_cron_jobs | RedHat | Debug First wal_g_cron Job
  run_once: true
  ansible.builtin.debug:
    var: wal_g_cron_jobs[0].job

# ‚úÖ Verify that the first wal_g_cron job for RedHat matches the expected job
- name: Molecule.tests.variables.asserts.wal_g_cron_jobs | RedHat | Verify First wal_g_cron Job
  run_once: true
  ansible.builtin.assert:
    that:
      - wal_g_cron_jobs[0].job == origin_wal_g_cron_jobs_create_job
    fail_msg: "Test failed: wal_g_cron_jobs[0].job is not as expected."
    success_msg: "Test passed: wal_g_cron_jobs[0].job is as expected."

# üîÑ Define the expected second wal_g_cron job for RedHat
- name: Molecule.tests.variables.asserts.wal_g_cron_jobs | RedHat | Define Expected Second wal_g_cron Job
  run_once: true
  ansible.builtin.set_fact: # yamllint disable rule:line-length
    origin_wal_g_cron_jobs_delete_job: "[ $(curl -s -o /dev/null -w '%{http_code}' http://{{ inventory_hostname }}:{{ patroni_restapi_port }}) = '200' ] && wal-g delete retain FULL 4 --confirm > {{ postgresql_log_dir }}/walg_delete.log 2>&1"

# üñ®Ô∏è Display the second wal_g_cron job for RedHat for debugging purposes
- name: Molecule.tests.variables.asserts.wal_g_cron_jobs | RedHat | Debug Second wal_g_cron Job
  run_once: true
  ansible.builtin.debug:
    var: wal_g_cron_jobs[1].job

# ‚úÖ Verify that the second wal_g_cron job for RedHat matches the expected job
- name: Molecule.tests.variables.asserts.wal_g_cron_jobs | RedHat | Verify Second wal_g_cron Job
  run_once: true
  ansible.builtin.assert:
    that:
      - wal_g_cron_jobs[1].job == origin_wal_g_cron_jobs_delete_job
    fail_msg: "Test failed: wal_g_cron_jobs[1].job is not as expected."
    success_msg: "Test passed: wal_g_cron_jobs[1].job is as expected."
