---
# üöÄ These tasks aim to test the system_info variable
# üéØ The objective is to guarantee that the system informations are correctly set

# ========================================
# üíª Start CPU model Operations and Tests
# ========================================

# üîÑ Define a valid CPU model
- name: Molecule.tests.variables.asserts.system_info | Set CPU Model Test Data (valid)
  run_once: true
  ansible.builtin.set_fact:
    ansible_processor: ["GenuineIntel", "Intel(R) Core(TM) i7-8700 CPU @ 3.20GHz", "Intel(R) Core(TM) i7-8700 CPU @ 3.20GHz"]
    ansible_processor_count: 6
    ansible_processor_cores: 12

# üìù Establishing test data for CPU model
- name: Molecule.tests.variables.asserts.system_info | Establish CPU Model Test Data
  run_once: true
  ansible.builtin.set_fact:
    system_info:
      CPU model: >-
        {{ ansible_processor[2] | default('N/A') }},
        count: {{ ansible_processor_count | default('N/A') }},
        cores: {{ ansible_processor_cores | default('N/A') }}

# üñ®Ô∏è Debugging the established CPU model
- name: Molecule.tests.variables.asserts.system_info | Debug CPU Model
  run_once: true
  ansible.builtin.debug:
    var: system_info['CPU model']

# ‚úÖ Verifying the correctness of the established CPU model
# If the CPU model is not set, the test fails and an error message is displayed
- name: Molecule.tests.variables.asserts.system_info | Verify CPU Model
  run_once: true
  ansible.builtin.assert:
    that:
      - "'CPU model' in system_info"
      - "system_info['CPU model'] is not none"
      - "system_info['CPU model'] != 'N/A'"
      - "system_info['CPU model'] == 'Intel(R) Core(TM) i7-8700 CPU @ 3.20GHz, count: 6, cores: 12'"
    fail_msg: "Test failed: CPU model is not set correctly in system_info."
    success_msg: "Test passed: CPU model is set correctly in system_info."

# ==================================================
# üíæ Start Disk space total Operations and Tests
# ==================================================

# üîÑ Define a valid Disk space total
- name: Molecule.tests.variables.asserts.system_info | Set Disk space total Test Data (valid)
  run_once: true
  ansible.builtin.set_fact:
    ansible_mounts:
      - mount: "/"
        size_total: "53687091200"  # 50 GB
      - mount: "/home"
        size_total: "107374182400"  # 100 GB

# üìù Establishing test data for Disk space total
- name: Molecule.tests.variables.asserts.system_info | Establish Disk space total Test Data
  run_once: true
  ansible.builtin.set_fact:
    system_info:
      Disk space total: >-
        {{
          (ansible_mounts
            | map(attribute='size_total')
            | map('int')
            | sum / 1024 / 1024 / 1024
          )
          | round(2) if ansible_mounts is defined else 'N/A'
        }} GB

# üñ®Ô∏è Debugging the established Disk space total
- name: Molecule.tests.variables.asserts.system_info | Debug Disk space total
  run_once: true
  ansible.builtin.debug:
    var: system_info['Disk space total']

# ‚úÖ Verifying the correctness of the established Disk space total
# If the Disk space total is not set, the test fails and an error message is displayed
- name: Molecule.tests.variables.asserts.system_info | Verify Disk space total
  run_once: true
  ansible.builtin.assert:
    that:
      - "'Disk space total' in system_info"
      - "system_info['Disk space total'] is not none"
      - "system_info['Disk space total'] != 'N/A'"
      - "system_info['Disk space total'] == '150.0 GB'"
    fail_msg: "Test failed: Disk space total is not set correctly in system_info."
    success_msg: "Test passed: Disk space total is set correctly in system_info."
