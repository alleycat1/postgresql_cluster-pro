---
# 🚀 These tasks aim to compute the overall pool size for PgBouncer, a PostgreSQL connection pooler
# 🎯 The objective is to guarantee that each database's pool size is precisely defined and calculated

# 📝 Establishing test data for PgBouncer pools. Two databases are specified, each with a pool size indicated in pool_parameters
- name: Molecule.tests.roles.pre-checks.variables.pgbouncer | Establish PgBouncer Pools Test Data
  run_once: true
  ansible.builtin.set_fact:
    pgbouncer_pools:
      - dbname: db1
        pool_parameters: "pool_size=10"
      - dbname: db2
        pool_parameters: "pool_size=20"

# ==================================================
# 💾 Start pgbouncer_pool_size operations and tests
# ==================================================

# 🔄 Calculating the overall pool size (pgbouncer_pool_size)
# For each database in pgbouncer_pools, we extract the pool size from pool_parameters and add it to the total
# If pool size is undefined, we use the default pool size (pgbouncer_default_pool_size), or 0 if that's also undefined
- name: Molecule.tests.roles.pre-checks.variables.pgbouncer | Compute Overall Pool Size
  run_once: true
  ansible.builtin.set_fact:
    pgbouncer_pool_size: "{{
        (pgbouncer_pool_size | default(0) | int)
        +
        (pool_item.pool_parameters
         | regex_search('pool_size=(\\d+)', multiline=False)
         | regex_replace('[^0-9]', '')
         | default(pgbouncer_default_pool_size | default(0), true)
         | int)
      }}"
  loop: "{{ pgbouncer_pools | default([]) }}"
  loop_control:
    loop_var: pool_item

# 🖨️ Debugging the calculated overall pool size
- name: Molecule.tests.roles.pre-checks.variables.pgbouncer | Debug Overall Pool Size
  run_once: true
  ansible.builtin.debug:
    var: pgbouncer_pool_size

# ✅ Verifying the correctness of the calculated overall pool size
# The expected overall pool size is 30 (10 from db1 and 20 from db2)
# If the calculated overall pool size is not 30, the test fails and an error message is displayed
- name: Molecule.tests.roles.pre-checks.variables.pgbouncer | Verify Pool Size Calculation
  run_once: true
  ansible.builtin.assert:
    that:
      - pgbouncer_pool_size | int == 30
    fail_msg: "Test failed: pgbouncer_pool_size is not equal to 30."
    success_msg: "Test passed: pgbouncer_pool_size is equal to 30."

# ========================================================
# 🚀 Start pgbouncer_total_pool_size operations and tests
# ========================================================

# 🖨️ Debugging test variables
- name: Molecule.tests.roles.pre-checks.variables.pgbouncer | Debug Test Variables
  run_once: true
  ansible.builtin.debug:
    var: "{{ debug_item }}"
  loop:
    - postgresql_databases
    - pgbouncer_pools
    - pgbouncer_default_pool_size
  loop_control:
    loop_var: debug_item

# 📝 Establishing test data for PostgreSQL databases
- name: Molecule.tests.roles.pre-checks.variables.pgbouncer | Establish PostgreSQL Databases Test Data
  run_once: true
  ansible.builtin.set_fact:
    postgresql_databases:
      - db: db1
      - db: db2
      - db: db3

# 🔄 Calculating the overall pool size (pgbouncer_total_pool_size) across all databases
- name: Molecule.tests.roles.pre-checks.variables.pgbouncer | Compute Total Pool Size
  run_once: true
  ansible.builtin.set_fact:
    pgbouncer_total_pool_size: >-
      {{
        (pgbouncer_pool_size | int)
        +
        (postgresql_databases
          | default([])
          | rejectattr('db', 'in', pgbouncer_pools | map(attribute='dbname') | list)
          | length
        ) * (pgbouncer_default_pool_size | default(0) | int)
      }}
  when: pgbouncer_pool_size is defined

# 🖨️ Debugging the calculated overall pool size
- name: Molecule.tests.roles.pre-checks.variables.pgbouncer | Debug Total Pool Size
  run_once: true
  ansible.builtin.debug:
    var: pgbouncer_total_pool_size

# ✅ Verifying the correctness of the calculated overall pool size
# The expected overall pool size is 50
#   10 from db1
#   20 from db2
#   20 from db3 as db3 is not defined in pgbouncer_pools and hence, its pool size is pgbouncer_default_pool_size which is 20
# If the calculated overall pool size is not 50, the test fails and an error message is displayed
- name: Molecule.tests.roles.pre-checks.variables.pgbouncer | Verify Total Pool Size Calculation
  run_once: true
  ansible.builtin.assert:
    that:
      - pgbouncer_total_pool_size | int == 50
    fail_msg: "Test failed: pgbouncer_total_pool_size is not equal to 50."
    success_msg: "Test passed: pgbouncer_total_pool_size is equal to 50."

# ======================================================================
# 📊 Start pgbouncer_total_pool_size (postgresql_databases not defined)
# ======================================================================

# 📝 Overriding postgresql_databases to an empty list for the next test
- name: Molecule.tests.roles.pre-checks.variables.pgbouncer | Override postgresql_databases
  run_once: true
  ansible.builtin.set_fact:
    postgresql_databases: []

# 🔄 Compute the aggregate pool size (pgbouncer_total_pool_size) across all databases with postgresql_databases not defined.
- name: Molecule.tests.roles.pre-checks.variables.pgbouncer | Compute Total Pool Size (postgresql_databases not defined)
  run_once: true
  ansible.builtin.set_fact:
    pgbouncer_total_pool_size: >-
      {{
        (pgbouncer_pool_size | int)
        +
        (postgresql_databases
          | default([])
          | rejectattr('db', 'in', pgbouncer_pools | map(attribute='dbname') | list)
          | length
        ) * (pgbouncer_default_pool_size | default(0) | int)
      }}
  when: pgbouncer_pool_size is defined

# ✅ Test if the computed aggregate pool size is correct with postgresql_databases not defined.
# In this case, we expect the aggregate pool size to be 30
#   10 from db1
#   20 from db2
#   0 from db3 as postgresql_databases is not defined
- name: Molecule.tests.roles.pre-checks.variables.pgbouncer | Verify Total Pool Size Calculation (postgresql_databases not defined)
  run_once: true
  ansible.builtin.assert:
    that:
      - pgbouncer_total_pool_size | int == 30
    fail_msg: "Test failed: pgbouncer_total_pool_size is not equal to 30."
    success_msg: "Test passed: pgbouncer_total_pool_size is equal to 30."
