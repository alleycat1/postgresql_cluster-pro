---
# ðŸš€ These tasks aim to validate the "custom_wal_dir" task
# ðŸŽ¯ The goal is to verify the correct display of renaming based on PostgreSQL version

# ðŸ”„ Set postgresql_version for the first test scenario
- name: Molecule.tests.roles.patroni.variables.custom_wal_dir | Define PG version as 11 for scenario 1
  run_once: true
  ansible.builtin.set_fact:
    postgresql_version: 11

# ======================================
# ðŸ’» Scenario: PostgreSQL version >= 10
# ======================================

# ðŸ”„ Determine base pg_wal_dir name
- name: Molecule.tests.roles.patroni.variables.custom_wal_dir | Set pg_wal_dir based on postgresql_version
  run_once: true
  ansible.builtin.set_fact:
    pg_wal_dir: "{{ 'pg_wal' if postgresql_version is version('10', '>=') else 'pg_xlog' }}"

# ðŸ”„ Determine the name based on postgresql_version
- name: Molecule.tests.roles.patroni.variables.custom_wal_dir | Determine name for scenario 1
  run_once: true
  ansible.builtin.set_fact:
    name_postgresql_version_11: "Rename {{ pg_wal_dir }} to {{ pg_wal_dir }}_old"

# ðŸ”„ Determine the mv command based on postgresql_version
- name: Molecule.tests.roles.patroni.variables.custom_wal_dir | Determine mv command for 'pg_wal' or 'pg_xlog' for scenario 1
  run_once: true
  ansible.builtin.set_fact:
    mv_command_postgresql_version_11: "mv {{ postgresql_data_dir }}/{{ pg_wal_dir }} {{ postgresql_data_dir }}/{{ pg_wal_dir }}_old"

# ðŸš€ Display the name
- name: Molecule.tests.roles.patroni.variables.custom_wal_dir | Display name for scenario 1
  run_once: true
  ansible.builtin.debug:
    var: name_postgresql_version_11

# ðŸš€ Display the command
- name: Molecule.tests.roles.patroni.variables.custom_wal_dir | Display command for scenario 1
  run_once: true
  ansible.builtin.debug:
    var: mv_command_postgresql_version_11

# âœ… Verify if the name has been determined correctly
- name: Molecule.tests.roles.patroni.variables.custom_wal_dir | Validate name for scenario 1
  run_once: true
  ansible.builtin.assert:
    that:
      - name_postgresql_version_11 == 'Rename pg_wal to pg_wal_old'
    fail_msg: "Test failed: The name has not been determined correctly."
    success_msg: "Test passed: The name has been determined correctly."

# âœ… Verify if the command has been determined correctly
- name: Molecule.tests.roles.patroni.variables.custom_wal_dir | Validate command for scenario 1
  run_once: true
  ansible.builtin.assert:
    that:
      - mv_command_postgresql_version_11 == 'mv /var/lib/pgsql/11/data/pg_wal /var/lib/pgsql/11/data/pg_wal_old'
    fail_msg: "Test failed: The command has not been determined correctly."
    success_msg: "Test passed: The command has been determined correctly."

# =====================================
# ðŸ’» Scenario: PostgreSQL version < 10
# =====================================

# ðŸ”„ Set postgresql_version for the second test scenario
- name: Molecule.tests.roles.patroni.variables.custom_wal_dir | Define PG version as 9.6 for scenario 2
  run_once: true
  ansible.builtin.set_fact:
    postgresql_version: 9.6

# ðŸ”„ Determine base pg_wal_dir name
- name: Molecule.tests.roles.patroni.variables.custom_wal_dir | Set pg_wal_dir based on postgresql_version
  run_once: true
  ansible.builtin.set_fact:
    pg_wal_dir: "{{ 'pg_wal' if postgresql_version is version('10', '>=') else 'pg_xlog' }}"

# ðŸ”„ Determine the name based on postgresql_version
- name: Molecule.tests.roles.patroni.variables.custom_wal_dir | Determine name for scenario 2
  run_once: true
  ansible.builtin.set_fact:
    name_postgresql_version_9: "Rename {{ pg_wal_dir }} to {{ pg_wal_dir }}_old"

# ðŸ”„ Determine the mv command based on postgresql_version
- name: Molecule.tests.roles.patroni.variables.custom_wal_dir | Determine mv command for scenario 2
  run_once: true
  ansible.builtin.set_fact:
    mv_command_postgresql_version_9: "mv {{ postgresql_data_dir }}/{{ pg_wal_dir }} {{ postgresql_data_dir }}/{{ pg_wal_dir }}_old"

# ðŸš€ Display the name
- name: Molecule.tests.roles.patroni.variables.custom_wal_dir | Display name for scenario 2
  run_once: true
  ansible.builtin.debug:
    var: name_postgresql_version_9

# ðŸš€ Display the command
- name: Molecule.tests.roles.patroni.variables.custom_wal_dir | Display command for scenario 2
  run_once: true
  ansible.builtin.debug:
    var: mv_command_postgresql_version_9

# âœ… Verify if the name has been determined correctly
- name: Molecule.tests.roles.patroni.variables.custom_wal_dir | Validate name for scenario 2
  run_once: true
  ansible.builtin.assert:
    that:
      - name_postgresql_version_9 == 'Rename pg_xlog to pg_xlog_old'
    fail_msg: "Test failed: The name has not been determined correctly in scenario 2."
    success_msg: "Test passed: The name has been determined correctly in scenario 2."

# âœ… Verify if the command has been determined correctly
- name: Molecule.tests.roles.patroni.variables.custom_wal_dir | Validate command for scenario 2
  run_once: true
  ansible.builtin.assert:
    that:
      - mv_command_postgresql_version_9 == 'mv /var/lib/pgsql/9.6/data/pg_xlog /var/lib/pgsql/9.6/data/pg_xlog_old'
    fail_msg: "Test failed: The command has not been determined correctly."
    success_msg: "Test passed: The command has been determined correctly."
